package com.mdo.domainobject;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mdo.domainobject.OilApplication;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OIL_APPLICATION.
*/
public class OilApplicationDao extends AbstractDao<OilApplication, Long> {

    public static final String TABLENAME = "OIL_APPLICATION";

    /**
     * Properties of entity OilApplication.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OilId = new Property(1, Integer.class, "OilId", false, "OIL_ID");
        public final static Property SymbolCode = new Property(2, String.class, "SymbolCode", false, "SYMBOL_CODE");
        public final static Property Description = new Property(3, String.class, "Description", false, "DESCRIPTION");
        public final static Property ApplicationType = new Property(4, Integer.class, "ApplicationType", false, "APPLICATION_TYPE");
        public final static Property AdditionalSymbols = new Property(5, String.class, "AdditionalSymbols", false, "ADDITIONAL_SYMBOLS");
    };


    public OilApplicationDao(DaoConfig config) {
        super(config);
    }
    
    public OilApplicationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OIL_APPLICATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OIL_ID' INTEGER," + // 1: OilId
                "'SYMBOL_CODE' TEXT," + // 2: SymbolCode
                "'DESCRIPTION' TEXT," + // 3: Description
                "'APPLICATION_TYPE' INTEGER," + // 4: ApplicationType
                "'ADDITIONAL_SYMBOLS' TEXT);"); // 5: AdditionalSymbols
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OIL_APPLICATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OilApplication entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer OilId = entity.getOilId();
        if (OilId != null) {
            stmt.bindLong(2, OilId);
        }
 
        String SymbolCode = entity.getSymbolCode();
        if (SymbolCode != null) {
            stmt.bindString(3, SymbolCode);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(4, Description);
        }
 
        Integer ApplicationType = entity.getApplicationType();
        if (ApplicationType != null) {
            stmt.bindLong(5, ApplicationType);
        }
 
        String AdditionalSymbols = entity.getAdditionalSymbols();
        if (AdditionalSymbols != null) {
            stmt.bindString(6, AdditionalSymbols);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OilApplication readEntity(Cursor cursor, int offset) {
        OilApplication entity = new OilApplication( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // OilId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SymbolCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Description
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ApplicationType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // AdditionalSymbols
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OilApplication entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOilId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSymbolCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApplicationType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAdditionalSymbols(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OilApplication entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OilApplication entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
