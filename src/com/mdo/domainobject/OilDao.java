package com.mdo.domainobject;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mdo.domainobject.Oil;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OIL.
*/
public class OilDao extends AbstractDao<Oil, Long> {

    public static final String TABLENAME = "OIL";

    /**
     * Properties of entity Oil.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ScientificName = new Property(2, String.class, "scientificName", false, "SCIENTIFIC_NAME");
        public final static Property Database = new Property(3, String.class, "database", false, "DATABASE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Uses = new Property(5, String.class, "uses", false, "USES");
        public final static Property Classification = new Property(6, String.class, "classification", false, "CLASSIFICATION");
        public final static Property SystemsAffected = new Property(7, String.class, "systemsAffected", false, "SYSTEMS_AFFECTED");
        public final static Property AromaticAffects = new Property(8, String.class, "aromaticAffects", false, "AROMATIC_AFFECTS");
        public final static Property SafetyPrecautions = new Property(9, String.class, "safetyPrecautions", false, "SAFETY_PRECAUTIONS");
        public final static Property Application = new Property(10, String.class, "application", false, "APPLICATION");
        public final static Property AdditionalSymbol = new Property(11, String.class, "additionalSymbol", false, "ADDITIONAL_SYMBOL");
        public final static Property ImageURL = new Property(12, String.class, "imageURL", false, "IMAGE_URL");
        public final static Property IsFree = new Property(13, Byte.class, "isFree", false, "IS_FREE");
        public final static Property Timestamp = new Property(14, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property IsSaved = new Property(15, Boolean.class, "isSaved", false, "IS_SAVED");
    };


    public OilDao(DaoConfig config) {
        super(config);
    }
    
    public OilDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OIL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'SCIENTIFIC_NAME' TEXT," + // 2: scientificName
                "'DATABASE' TEXT," + // 3: database
                "'DESCRIPTION' TEXT," + // 4: description
                "'USES' TEXT," + // 5: uses
                "'CLASSIFICATION' TEXT," + // 6: classification
                "'SYSTEMS_AFFECTED' TEXT," + // 7: systemsAffected
                "'AROMATIC_AFFECTS' TEXT," + // 8: aromaticAffects
                "'SAFETY_PRECAUTIONS' TEXT," + // 9: safetyPrecautions
                "'APPLICATION' TEXT," + // 10: application
                "'ADDITIONAL_SYMBOL' TEXT," + // 11: additionalSymbol
                "'IMAGE_URL' TEXT," + // 12: imageURL
                "'IS_FREE' INTEGER," + // 13: isFree
                "'TIMESTAMP' TEXT," + // 14: timestamp
                "'IS_SAVED' INTEGER);"); // 15: isSaved
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Oil entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String scientificName = entity.getScientificName();
        if (scientificName != null) {
            stmt.bindString(3, scientificName);
        }
 
        String database = entity.getDatabase();
        if (database != null) {
            stmt.bindString(4, database);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String uses = entity.getUses();
        if (uses != null) {
            stmt.bindString(6, uses);
        }
 
        String classification = entity.getClassification();
        if (classification != null) {
            stmt.bindString(7, classification);
        }
 
        String systemsAffected = entity.getSystemsAffected();
        if (systemsAffected != null) {
            stmt.bindString(8, systemsAffected);
        }
 
        String aromaticAffects = entity.getAromaticAffects();
        if (aromaticAffects != null) {
            stmt.bindString(9, aromaticAffects);
        }
 
        String safetyPrecautions = entity.getSafetyPrecautions();
        if (safetyPrecautions != null) {
            stmt.bindString(10, safetyPrecautions);
        }
 
        String application = entity.getApplication();
        if (application != null) {
            stmt.bindString(11, application);
        }
 
        String additionalSymbol = entity.getAdditionalSymbol();
        if (additionalSymbol != null) {
            stmt.bindString(12, additionalSymbol);
        }
 
        String imageURL = entity.getImageURL();
        if (imageURL != null) {
            stmt.bindString(13, imageURL);
        }
 
        Byte isFree = entity.getIsFree();
        if (isFree != null) {
            stmt.bindLong(14, isFree);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(15, timestamp);
        }
 
        Boolean isSaved = entity.getIsSaved();
        if (isSaved != null) {
            stmt.bindLong(16, isSaved ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Oil readEntity(Cursor cursor, int offset) {
        Oil entity = new Oil( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // scientificName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // database
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uses
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // classification
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // systemsAffected
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // aromaticAffects
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // safetyPrecautions
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // application
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // additionalSymbol
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imageURL
            cursor.isNull(offset + 13) ? null : (byte) cursor.getShort(offset + 13), // isFree
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // timestamp
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // isSaved
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Oil entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScientificName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDatabase(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUses(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClassification(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSystemsAffected(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAromaticAffects(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSafetyPrecautions(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setApplication(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAdditionalSymbol(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImageURL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsFree(cursor.isNull(offset + 13) ? null : (byte) cursor.getShort(offset + 13));
        entity.setTimestamp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsSaved(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Oil entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Oil entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
