package com.mdo.domainobject;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mdo.domainobject.Symptom;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SYMPTOM.
*/
public class SymptomDao extends AbstractDao<Symptom, Long> {

    public static final String TABLENAME = "SYMPTOM";

    /**
     * Properties of entity Symptom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Database = new Property(2, String.class, "database", false, "DATABASE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Blends = new Property(4, String.class, "Blends", false, "BLENDS");
        public final static Property AdditionalProducts = new Property(5, String.class, "AdditionalProducts", false, "ADDITIONAL_PRODUCTS");
        public final static Property AdditionalSymbols = new Property(6, String.class, "AdditionalSymbols", false, "ADDITIONAL_SYMBOLS");
        public final static Property Contraindications = new Property(7, String.class, "contraindications", false, "CONTRAINDICATIONS");
        public final static Property PrimaryOils = new Property(8, String.class, "primaryOils", false, "PRIMARY_OILS");
        public final static Property SecondaryOils = new Property(9, String.class, "secondaryOils", false, "SECONDARY_OILS");
        public final static Property TertiaryOils = new Property(10, String.class, "TertiaryOils", false, "TERTIARY_OILS");
        public final static Property IsFree = new Property(11, Byte.class, "isFree", false, "IS_FREE");
        public final static Property Timestamp = new Property(12, String.class, "timestamp", false, "TIMESTAMP");
    };


    public SymptomDao(DaoConfig config) {
        super(config);
    }
    
    public SymptomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SYMPTOM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DATABASE' TEXT," + // 2: database
                "'DESCRIPTION' TEXT," + // 3: description
                "'BLENDS' TEXT," + // 4: Blends
                "'ADDITIONAL_PRODUCTS' TEXT," + // 5: AdditionalProducts
                "'ADDITIONAL_SYMBOLS' TEXT," + // 6: AdditionalSymbols
                "'CONTRAINDICATIONS' TEXT," + // 7: contraindications
                "'PRIMARY_OILS' TEXT," + // 8: primaryOils
                "'SECONDARY_OILS' TEXT," + // 9: secondaryOils
                "'TERTIARY_OILS' TEXT," + // 10: TertiaryOils
                "'IS_FREE' INTEGER," + // 11: isFree
                "'TIMESTAMP' TEXT);"); // 12: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYMPTOM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Symptom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String database = entity.getDatabase();
        if (database != null) {
            stmt.bindString(3, database);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String Blends = entity.getBlends();
        if (Blends != null) {
            stmt.bindString(5, Blends);
        }
 
        String AdditionalProducts = entity.getAdditionalProducts();
        if (AdditionalProducts != null) {
            stmt.bindString(6, AdditionalProducts);
        }
 
        String AdditionalSymbols = entity.getAdditionalSymbols();
        if (AdditionalSymbols != null) {
            stmt.bindString(7, AdditionalSymbols);
        }
 
        String contraindications = entity.getContraindications();
        if (contraindications != null) {
            stmt.bindString(8, contraindications);
        }
 
        String primaryOils = entity.getPrimaryOils();
        if (primaryOils != null) {
            stmt.bindString(9, primaryOils);
        }
 
        String secondaryOils = entity.getSecondaryOils();
        if (secondaryOils != null) {
            stmt.bindString(10, secondaryOils);
        }
 
        String TertiaryOils = entity.getTertiaryOils();
        if (TertiaryOils != null) {
            stmt.bindString(11, TertiaryOils);
        }
 
        Byte isFree = entity.getIsFree();
        if (isFree != null) {
            stmt.bindLong(12, isFree);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(13, timestamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Symptom readEntity(Cursor cursor, int offset) {
        Symptom entity = new Symptom( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // database
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Blends
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AdditionalProducts
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AdditionalSymbols
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contraindications
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // primaryOils
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // secondaryOils
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // TertiaryOils
            cursor.isNull(offset + 11) ? null : (byte) cursor.getShort(offset + 11), // isFree
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Symptom entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDatabase(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBlends(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdditionalProducts(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdditionalSymbols(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContraindications(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrimaryOils(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSecondaryOils(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTertiaryOils(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsFree(cursor.isNull(offset + 11) ? null : (byte) cursor.getShort(offset + 11));
        entity.setTimestamp(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Symptom entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Symptom entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
